generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model task_notes {
  note_id    Int          @id
  task_id    Int?
  user_id    Int?
  note_text  String?
  rating     rating_enum?
  created_at DateTime?    @default(now()) @db.Timestamp(6)
  updated_at DateTime?    @default(now()) @db.Timestamp(6)
  tasks      tasks?       @relation(fields: [task_id], references: [task_id], onDelete: Cascade, onUpdate: NoAction)
  users      users?       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model tasks {
  task_id             Int              @id @default(autoincrement())
  user_id           Int?
  title             String?            @db.VarChar(255)
  description       String?
  status            status_enum?       @default(pendente)
  start_date        DateTime?          @default(now()) @db.Timestamp(6)
  end_date          DateTime?          @db.Timestamp(6)
  xp_reward         Int?               @default(0)
  penalty           Int?               @default(0)
  related_attribute String?            @db.VarChar(255)
  progress          Int?               @default(0)
  is_recurring      Boolean?           @default(false)
  created_at        DateTime?          @default(now()) @db.Timestamp(6)
  updated_at        DateTime?          @default(now()) @db.Timestamp(6)
  mission_type      mission_type_enum? @default(estudo)
  task_notes        task_notes[]
  users             users?             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_attributes {
  user_id                    Int   @id
  strength_level             Int?  @default(1)
  intelligence_level         Int?  @default(1)
  energy_level               Int?  @default(1)
  discipline_level           Int?  @default(1)
  strength_xp                Int?  @default(0)
  intelligence_xp            Int?  @default(0)
  energy_xp                  Int?  @default(0)
  discipline_xp              Int?  @default(0)
  next_level_strength_xp     Int?  @default(90)
  next_level_intelligence_xp Int?  @default(90)
  next_level_energy_xp       Int?  @default(90)
  next_level_discipline_xp   Int?  @default(90)
  users                      users @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id              Int              @id @default(autoincrement())
  email           String           @db.VarChar(255)
  name            String           @db.VarChar(255)
  username        String           @db.VarChar(255)
  password        String           @db.VarChar(255)
  created_at      DateTime?        @default(now()) @db.Timestamp(6)
  updated_at      DateTime?        @db.Timestamp(6)
  task_notes      task_notes[]
  tasks           tasks[]
  user_attributes user_attributes?
}

enum mission_type_enum {
  estudo
  trabalho
  exerc_cio_f_sico @map("exercício físico")
}
enum rating_enum {
  ONE @map("1")
  TWO @map("2")
  THREE @map("3")
  FOUR @map("4")
  FIVE @map("5")
}

enum status_enum {
  pendente
  em_andamento @map("em andamento")
  conclu_da    @map("concluída")
}
